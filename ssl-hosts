#!/usr/bin/env bash

CONFIG_MAP_NAME=httpsify-config

cd $(dirname $(readlink -f $0))

source /usr/local/etc/colors.sh
source /usr/local/lib/prompt
source /usr/local/lib/concurrently
source /usr/local/lib/help-utils

source .scripts/kube.sh
source .scripts/kube-util.sh

istioNamespace=${ISTIO_NAMESPACE:-'istio-system'}
hostListFile=letsencrypt/secured-host-list
ingressHost=istio-ingressgateway.istio-system.svc.cluster.local

k.namespaceExists ${istioNamespace} || {
  echo "${error}Istio namespace ${highlight}${istioNamespace}${clr} does not exist"
  die 1
}

validatedHostListFile=$(mktemp)
hostConfigFile=$(mktemp)
hostConfigMapFile=$(mktemp)

cat ${hostListFile} \
  | sed 's/\s*#.*//g' \
  | grep -vP '^\s*$' \
  > ${validatedHostListFile}

if [[ "$(cat ${validatedHostListFile} | wc -l)" == "0" ]]; then
  echo "${error}No hosts specified for SSL termination in host list file: ${highlight}${hostListFile}${clr}"
  die 1
fi

function generateAndApplyConfig() {
    cat ${validatedHostListFile} \
      | awk 'ORS=",\n" { print "  \""$1"\": [ \"'"${ingressHost}"'\" ]" }' \
      | sed '$s/,//' \
      | (echo '{' ; cat ; echo '}') \
      > ${hostConfigFile}

    echo "${info}SSL termination will be enabled for hosts:"
    cat ${validatedHostListFile} | grep -vP '^\s*$' | awk '{ print "'"${listItem} ${highlisht}"'"$1"'"${clr}"'" }'

    $kube create configmap ${CONFIG_MAP_NAME} --from-file=hosts.json=${hostConfigFile} -o yaml --dry-run=true >${hostConfigMapFile} || {
      echo "${error}Failed to create ConfigMap for kubernetes"
      die 1
    }

    prompt "Review generated config?" inverse && vim ${hostConfigMapFile}

    prompt "Proceed?" || { echo "${info}}Aborting"; die 0; }

    $kube apply -f ${hostConfigMapFile} -n ${istioNamespace} >/dev/null || {
      echo "${error}Failed to apply ConfigMap to kubernetes cluster"
      die 1
    }
}

function eagerInit() {
    k.waitPod "ssl-termination-edge-proxy" || {
      echo "${error}Failed to await SSL termination proxy to start..."
      exit 1
    }

    cat ${validatedHostListFile} | sed 's#^#curl -s https://#g' | sed 's#$# >/dev/null#g' | concurrently 5 'initializing certificates'
}

function deployProxy() {
    $kube apply -f letsencrypt/httpsify.yaml >/dev/null || {
      echo "${error}Failed to deploy SSL termination proxy"
      die 1
    }
}

function showHelp() {
    echo "  install-ssl ${cyan}[${clr}OPTIONS${cyan}]${clr} ${cyan}[${clr}$(usage.commands all deploy-proxy proxy init-ssl init eager-init help)${cyan}]${clr}"
    echo
    echo " modes"
    echo "  ${listItem} $(description.commands all) - generate config map and execute all modes below, default mode to execute if no arguments given"
    echo "  ${listItem} $(description.commands deploy-proxy proxy) - deploy TLS termination proxy and execute modes below"
    echo "  ${listItem} $(description.commands init-ssl init eager-init) - initialize certificate obtaining for terminating SSL proxy"
    echo "  ${listItem} $(description.commands help) - show this help"
    echo
    echo " options"
    echo "  ${listItem} $(description.opts -h --help) - show this help"
    echo
}

function die() {
  rm -f ${hostConfigfile} ${hostConfigMapFile} &>/dev/null
  exit ${1}
}


case "${1}" in
  all | '')
    generateAndApplyConfig
    prompt "Deploy SSL termination proxy?" && deployProxy
    prompt "Eager init SSL certificates?" && eagerInit
    ;;
  deploy-proxy | proxy )
    deployProxy
    prompt "Eager init SSL certificates?" && eagerInit
    ;;
  init-ssl | init | eager-init )
    eagerInit
    ;;
  help | -h | --help)
    showHelp
    ;;
  * )
    echo "${error}Unknown arguments: ${highlight}${@}${clr}"
    showHelp
    die 1
    ;;
esac

die 0
