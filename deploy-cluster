#!/usr/bin/env bash

cd $(dirname $(readlink -f $0))

source /usr/local/etc/colors.sh
source .scripts/kube.sh
source /usr/local/lib/prompt

istio=${ISTIOCTL:-istioctl}

if ! type $istio &>/dev/null; then
  if [[ n"${ISTIOCTL}" == "n" ]]; then
        echo "${error}No ${highlight}ISTIOCTL${clr} specified and ${highlight}istio${clr} binary doesn't exist" >&2
        exit 1
    fi
    echo "${error}ISTIOCTL contains invalid binary. Is ${highlight}${istio}${clr} an alias?" >&2
    exit 1
fi

n="istio-system"
q="${highligh}>>> "

function checkSecret() {
    $kube -n ${n} get secret ${1} &>/dev/null
}

function checkSecrets() {
    checkSecret istio.grafana && \
    checkSecret istio.kiali && \
    checkSecret istio.prom && \
    checkSecret istio.tracing
}

function createSecretFor {
  echo
  echo "${info}Creating secret for ${highlight}${1}${clr}"
  usernameKey=username passwordKey=passphrase ./create-secret ${n} ${1} || exit 1
  echo "${success}Secret for ${highlight}${1}${clr} created"
}

function ensureSecret() {
    checkSecret ${1} || createSecretFor ${1}
}

function createSecrets() {
    prompt "Create secrets for maintanance services?" && {
      ensureSecret istio.grafana
      ensureSecret istio.kiali
      ensureSecret istio.prom
      ensureSecret istio.tracing
    }
}

if ! $kube get namespace "${n}" &>/dev/null; then
    echo "${info}Istio namespace doesn't exist"

    prompt "Would you like to create it?" && {
      $kube create namespace ${n} &>/dev/null && echo "${success}Created istio namespace: ${highlight}${n}${clr}" || {
        echo "${error}Failed to create istio namespace"
        exit 1
      }
    }
fi

checkSecrets || createSecrets

if ! [[ -d .istio-manifests ]]; then
    mkdir .istio-manifests || {
      echo "${error}Failed to create system directory for istio manifest files"
      exit 1
    }
fi

currentManifest=$(cat .istio-manifests/current 2>/dev/null)
if [[ -f .istio-manifests/${currentManifest} ]]; then
    echo "${warning}Istio cluster probably exists (at least there is manifest for it: ${highlight}${currentManifest}${clr})"
    prompt "Would you like to continue anyway?" inverse || {
      echo "${info}Aborting"
      exit 1
    }
fi
newManifest="istio-$(uuidgen).yaml"
echo ${newManifest} > .istio-manifests/current

echo "${info}Generating manifest for istio cluster"
$istio manifest generate -f cluster/istio.yaml ${istioKubeFile} > .istio-manifests/${newManifest}

prompt "Would you like to patch istio generated manifest? (bug with limits for istio-pilot)" && {
  vim .istio-manifests/${newManifest}
}

echo
echo "${info}Everything is ready to create your new istio cluster!"
prompt "Proceed?" || {
  echo "${info}Aborting"
  exit 0
}

$kube apply -f .istio-manifests/${newManifest} >/dev/null || {
  echo "${warning}Got errors creating istio cluster" >&2
  prompt "Continue anyway?" inverse || exit 1
}
echo "${success}Deployed istio cluster"

prompt "Enable SSL termination & expose cluster?" || {
  echo "${success}My work here is done. Have a nice day!"
  exit 0
}

./ssl-hosts ${n} || exit 1

echo "${success}My work here is done. Have a nice day!"
