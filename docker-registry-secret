#!/usr/bin/env bash

source /usr/local/lib/require-binary
source /usr/local/etc/colors.sh
source /usr/local/lib/help-utils

cd $(dirname $(readlink -f $0))

REGISTRY_URI='https://cloud.canister.io:5000'
SECRET_NAME="local-docker-registry-secret"

function login() {
    require-bin "docker"

    configDir=$(mktemp -d)

    echo "${info}Login to ${highlight}${REGISTRY_URI}${clr}:"
    docker --config=${configDir} login ${REGISTRY_URI} || {
      echo "${error}Failed to login in docker registry"
      rm -rf ${configDir}
      exit 1
    }

    cat ${configDir}/config.json | base64 -w0 | (
      if has-bin xsel; then
        cat | xsel -b
        echo
        echo "${info}Copied secret to clipboard"
      else
        echo -n "${info}Secret: ${highlight}"
        cat
        echo "${clr}"
        echo "${info}Couldn't find ${highlight}xsel${clr} binary - copy secret manually"
      fi
    )
    echo "${info}Now you can go to kubernetes cluster and invoke this script with ${highlight}apply${clr} mode"
    rm -rf ${configDir}
}

function apply() {
    source .scripts/kube.sh

    echo -n "${highlight}>>>${clr} Paste docker registry secret: "
    read -s dockerRegistrySecret

    echo

    currentNamespace=$($kube config view -o jsonpath='{.contexts[?(@.name == "'"$($kube config view -o jsonpath='{.current-context}')"'")].context.namespace}')
    secretFile=$(mktemp)
    echo ${dockerRegistrySecret} | base64 -d > ${secretFile}

    $kube create secret generic ${SECRET_NAME} \
    --from-file=.dockerconfigjson=${secretFile} \
    --namespace=${1:-$currentNamespace} \
    --type=kubernetes.io/dockerconfigjson >/dev/null || {
      echo "${error}Failed to create secret in kubernetes"
      rm -f ${secretFile}
      exit 1
    }
    echo "${success}Created secret in kubernetes"
    rm -f ${secretFile}
}

function cloneSecret() {
    source .scripts/kube.sh

    current=$($kube config view -o jsonpath='{.contexts[?(@.name == "'"$($kube config view -o jsonpath='{.current-context}')"'")].context.namespace}')
    echo "${info}Copying secret from ${highlight}default${clr} namespace to ${highlight}${current}${clr}"
    $kube get secret ${SECRET_NAME} --namespace=default -oyaml | grep -v 'namespace:' | kubectl apply --namespace=${current} -f - >/dev/null || {
      echo "${error}Failed to clone kubernetes secret from ${highlight}default${clr} namespace to ${highlight}${current}${clr}"
      exit 1
    }
}

function showHelp() {
    echo "  docker-registry-secret ${cyan}[${clr}OPTIONS${cyan}]${clr} ${cyan}[${clr}$(usage.commands login apply help clone)${cyan}]${clr}"
    echo
    echo " modes"
    echo "  ${listItem} $(description.commands login) - login in docker registry and copy secret"
    echo "  ${listItem} $(description.commands apply) ${cyan}[${clr}${highlight}NAMESPACE${clr}${cyan}]${clr} - apply secret to kubernetes cluster in given ${highlight}NAMESPACE${clr} or current if none given"
    echo "  ${listItem} $(description.commands clone clone-secret) - clone docker registry kubernetes secret from default namespace to current"
    echo "  ${listItem} $(description.commands help) - show this help"
    echo
    echo " options"
    echo "  ${listItem} $(description.opts -h --help) - show this help"
    echo
}

case "${1}" in
  login ) login ;;
  apply ) apply ${2} ;;
  clone | clone-secret ) cloneSecret ;;
  help | -h | --help | '' ) showHelp ;;
  * )
    echo "${error}Unknown arguments: ${highlight}${@}${clr}"
    showHelp
    exit 1 ;;
esac
